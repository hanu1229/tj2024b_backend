[디자인패턴]
	- 패턴 : 되풀이되는 형태
	- 소프트웨어 설계 과정에서 자주 발생하는 문제들의 설계 유형
	- 종류
		1. 싱글톤 패턴
		2. MVC패턴
[싱글톤패턴]
	- 정의 : 프로그램내 인스턴스가 단 1개만 존재하는 패턴/설계
	- 목적 : 하나의 인스턴스를 만들고 메모리를 공유하기 위해서이다.
		- 여러개의 인스턴스가 존재하면 서로 다른 메모리를 사용하므로 공유하는데 제약이 있다.
		- 협업에 있어서 굳이 여러개의 인스턴스가 필요 없는 경우, 기능역할
	- 싱글톤
		1단계 : 디폴트 생성자를 private로 생성한다.
				private 생성자명() { }
		2단계 : 지정된 클래스에 private static으로 인스턴스 선언하기 
				private static 클래스명 멤버변수명 = new 클래스명();
		3단계 : 지정한 클래스에 public static 클래스명 getInstance메소드를 선언한다
				public static 반환타입 getInstance() { return this.멤버변수; }
		4단계 : 다른 클래스에서 싱글톤 호출하기
			클래스명.getInstance();
			
[MVC패턴]
	- 정의 : 소프트웨어 개발에서 사용되는 디자인패턴으로 주요 역할을 세가지로 분리하고
			코드의 모듈화와 유지보수성을 높인다.
	- 목적 : 프로젝트를 설계할때 복잡한 코드와 파일들을 MVC패턴에 따라 구성하는 방법
	- 장점 : 협업, 유지보수, 모듈화, 단일기능 제공 등등
	- 단점 : 분리함으로써 파일이 많아져서 관리 하는 복잡도가 높다.
	- 예시
		- 1인식당(사장님이 서빙, 요리, 재료준비를 다함) : 식당 규모가 작으니까 혼자서도 운영이 가능하다.
		- 직원이 있는 식당(서빙직원, 요리직원, 재료직원) : 식당 규모가 커지면 여러명이서 운영한다.
			- 직원들에게 업무분담을 하는 이유 : 전문성, 문제파악, 문제해결 등등
		
		- 소규모 프로그램은 하나의 클래스에서도 운영이 가능하다.
		- 대규모 프로그램은 여러개의 클래스로 운영한다.
			- 클래스를 각각 분리하는 이유는 문제가 발생했을때 유지보수성을 높일 수 있다.
			
			
	- 세가지 역할
		- M(Model) : 데이터 관리 담당
			- 주로 웹/앱에서는 JAVA/PYTHON/C++/c#등등 (백엔드)
			- 주로 데이터베이스(DB/데이터)와 상호작용
			- 주요 키워드
				- DAO(Data Access Object)
					: 데이터베이스와 상호작용을 담당하는 객체(클래스)
				- DTO(Data Transfer Object)
					: 서로 다른 레이어/계층간의 데이터를 이동하는 객체(클래스)
			- 관례적인 규칙
				- Dao클래스는 굳이 여러개의 객체가 필요없다. (싱글톤 패턴 적용 가능)
				- Dto클래스는 여러개의 객체가 필요하다. (싱글톤 패턴 적용 불가능) (단일 객체, 복수객체 = 배열, 컬랙션 프레임워크)
				- Console프로젝트 : print, scan 함수 사용 불가능(단, 개발 테스트 목적으로 사용 가능)
				
		- V(View) : 입출력 담당
			- 주로 웹/앱에서는 HTML/CSS/JS언어 (프론트엔드)
			- 주로 사용자로부터 입력과 출력을 담당
			- 관례적인 규칙
				Console프로젝트 : view클래스에서만 print, scan함수를 사용한다.
			
		- C(Controller) : Model과 View사이의 제어와 전달 및 유효성 검사, 타입변환 담당
			- 주로 웹/앱에서는 JAVA/PYTHON/C++/c#등등 (백엔드)
			- 사용자(View)의 요청을 받아 Model에게 전달가고 결과를 받아 사용자(View)에게 전달
			- 주요 키워드
				MVC패턴 			: controller
				MVC2패턴	3티어		: controller + service (역할을 좀더 세분화)
			- 관례적인 규칙
				- Console프로젝트 : print, scan함수 불가능(단, 개발 테스트 목적으로 사용 가능)
				- 데이터베이스에 접근 불가능
				
	- 세 가지 역할 흐름도
		[요청] : 사용자 --> View --> DTO --> Controller --> Model(DAO)
		[응답] : 사용자 <-- View <-- DTO <-- Controller <-- Model(DAO)
		[주의할점] :  개발자 위 흐름순서가 다르게 코드 작성이 가능하지만 관레적으로 위 흐름으로 코드를 작성해야한다.
		

[실습 1]
	- day13 패키지
		- boardProgram8 패키지
			- controller 패키지
				- BoardController 클래스 	(싱글톤 패턴)
					: 입력받은 게시물 정보를 받아 dao에게 전달하는 담당 클래스
					
			- model 패키지
				- dao 패키지
					- BoardDao 클래스 	(싱글톤 패턴)
						: (데이터 관련)기능을 처리하는 담당 클래스
						
				- dto 패키지
					- BoardDto 클래스
						: 서로 다른 클래스간의 데이터 이동시 사용되는 클래스
					
			- view 패키지
				- BoardView 클래스 		(싱글톤 패턴)
					: 게시물의 입출력을 담당하는 클래스
					
			- AppStart 클래스 			(싱글톤 패턴)
				: 프로그램을 시작하는 클래스(main함수 포함)
				
[실습2]
					[View]	--------->	[Controller]	--------->	[dao]
				
		게시물 등록
			- [BoardDto] : view에서 사용자로부터 입력받은 title, content, writer 3가지
							정보를 하나의 객체로 구성
			- [boolean] : dao에서 등록 처리 결과를 성공과 실패를 표현하기위해 임의로 성공하면
							true 실패하면 false로 구성
							
					[View]				[Controller]				[dao]
							--------->					--------->
							[BoardDto]					[BoardDto]
							
							<---------					<---------
							[boolean]					[boolean]
				
		게시물 출력
			- x : 출력 요청시 요구사항이 없다.
			- [BoardDto[]] : dao에서 관리하는 모든 게시물목록[배열]을 view에게 전달
			
					[View]				[Controller]				[dao]
							--------->					--------->
								x							x
								
							<---------					<---------
							[BoardDto[]]				[BoardDto[]]
			
		게시물 삭제
			- [int] : 삭제가 가능하도록 고유한 식별번호
			- [boolean] : dao에서 삭제 처리 성공/실패여부를 true/false로 구성하여 반환
			
					[View]				[Controller]				[dao]
							--------->					--------->
							  [int]						  [int]
							<---------					<---------
							[boolean]					[boolean]
		
		게시물 수정
			- [int][BoardDto] : 수정할 식별변호와 수정할 값들을 보낸다.
			- [boolean] : dao에서 수정 처리 성공/실패여부를 true/false로 구성하여 반환
			
					[View]				[Controller]				[dao]
							--------->					--------->
							[int][BoardDto]				[int][BoardDto]
							<---------					<---------
							[boolean]					[boolean]
				
				