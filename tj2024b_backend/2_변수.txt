[변수]
	- 변하는 수
	- 값을 넣을 수 있는 빈 그릇
	- 변수 형태
		자료형 변수명 = 리터럴(값);
	- 변수 선언
		1. 선언 : 자료형 변수명;
		2. 초기화 : 자료형 변수명 = 리터럴(값);
	- 변수명 작성 주의할점
		1. 숫자로 시작 X, 띄어쓰기 X
		2. 특수문즈 $, _만 가능
		3. 키워드(예약어) : if for int 등등
		4. 카멜표기법으로 작성 권장
	- 변수의 값 호출
		변수명;
	- 변수의 값 수정
		변수명 = 새로운값;
		
[리터럴]
	- 데이터 그자체, 키보드로부터 입력한 자료
	- 자바 리터럴 : 논리(boolean), 문자(char), 정수(int), 실수(double)

[자바 기본 타입(자료형)]
	- 타입, 자료의 형식, 자료를 분류하는 방법
	- 타입을 여러가지 구분해서 범위에 맞게 사용하라고 하는 이유?
		- 메모리를 효율적이고 적절하게 선택하여 사용하기 위해서
			  [키워드]		[용량]	[저장범위]
	1. [논리]		: boolean		1바이트	true 혹은 false
	
	2. [문자]		: char			2바이트	유니코드(UTF-16), '문자', ex) 'A'
	
	3. [문자열]	: String		N바이트	문자열클래스, "문자열", ex) "ABC"
	
	4. [정수]		: byte			1바이트	-128 ~ 128-1
				: short			2바이트	-32,768 ~ 32,768-1
				: int			4바이트	-2,147,483,648 ~ 2,147,483,648-1
				: long			8바이트	-2^63 ~ 2^63-1 / 숫자 뒤에 L
			
	5. [실수]		: float			4바이트	소수점 8자리 표현	/ 숫자 뒤에 F
				: double		8바이트	소수점 17자리 표현

[부동 소수점]
	- 0과 1사이의 실수는 끝없는 무한대로 표현이 가능함으로 컴퓨터에 한계를 만들었다.
	- 지수부 : 숫자의 크기를 조정하는 역할 / 몇승
	- 가수부 : 숫자의 유효 자리수를 표현 / 숫자 자체
	float : 부호 1비트, 지수부 8비트, 가수부 23비트
	double : 부호 1비티, 지수부 11비트, 가수부 52빝,
		ex) -6.25
			1. 2진수로 표현	: -110.01
			2. 부호			: 1
		ex) 1000000
			가수 : 1, 지수 :10^6
	- 실제 연산이 중용한 부분에 업무에서는 실수타입을 사용하는데 한계(오차)가 있어 잘 사용하지 않는다.
		해결법 : 라이브러리(BigDecimal) 또는 문자열 처리
		
[상수]
	- 초기화 이후 변하지 않는 값
	- final 키워드 사용
	- 상수명은 관례적으로 대문자로 작성한다.
	
[리터럴]
	- 개발자가 키보드로 입력한 숫자, 문자, 논리등을 말한다.
	- 자바는 이러한 리터럴값들을 상수풀(메모리공간)이라는 곳에 상수로 저장한다.
	
[타입변환]
	1. 자동 타입변환(묵시적 형변환)
		- 메모리의 크기가 작은 것부터 큰 순으로 변환
		- 데이터의 손실이 없다.
		- 연산(계산)중에는 큰 값으로 변환된다.(메모리 손실 방지)
		- byte -> short, char -> int -> long -> float -> double
		- 연산자중에 묵시적형변환(연산시 피욘산자중에 더 큰 타입으로 결과를 반환한다)
	2. 강제 타입변환(명시적 형변환), 캐스팅
		- 메모리 크기가 큰 것부터 작은 순으로 반환
		- 