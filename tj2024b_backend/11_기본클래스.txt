[기본클래스]
	- java.lang패키지 : 기본적으로 많이 사용하는 클래스들이 포함되어 있는 폴더
	
	- import문을 직접 쓰지 않아도 자동으로 추가되는 패키지
	
	- Object, String, System, Integer 등등
	
[Object 클래스]
	- 자바에서의 최상위 클래스
	
	- 모든 클래스는 자동으로 extends Object가 된다.
		-> 자바 100% 객체지향 구현, 다향성
		
	- 주요 메소드
		1. .toString() : 인스턴스(객체)의 참조(주소) 값(16진수) 반환 함수
			- 주로 오버라이딩(재정의)해서 객체의 기능 변경
			
		2. .equals() : 두 인스턴스(객체)가 동일한지 여부를 반환하는 함수
			- 주로 String타입의 문자열 비교에서 사용한다.
			- 차이점
				- == : 스택 메모리 값 비교, 리터럴 값 비교
				- .equals() : 힙 메모리 값 비교, 참조(주소)값 비교
				
		3. .hashCode() : 인스턴스의 해시 코드 값을 반환하는 함수
			- 인스턴스(객체)의 주소값을 정수로 반환하는 함수
			- 주로 인스턴스(객체)가 저장된 위치를 검색할때 사용되는 자료구조(자료를 저장하는 방법)
				
				
[메모리]
	1. 스택 메모리 : 함수 내 선언된 변수/지역변수
		- int a = 3;
		- 기본타입의 리터럴 값 저장
		
	2. 힙 메모리 : 멤버변수
		- String str = new String("홍길동");
		- 참조타입의 값 

[Class 클래스]
	- 우리가 코드를 작성한 파일은 .java 확장자 파일이다.
		- .java파일을 실행(컴파일/번역)하면 .class 파일이 생성된다.
			.java파일(src폴더)
			.class파일(bin폴더)
			
	- 클래스의 정보를 사용할 경우 사용하는 클래스
	
	- 주요 메소드
		1. Class 변수명 = (인스턴스명).getClass() : 인스턴스의 class 정보를 반환하는 함수
			- 주로 인스턴스의 타입을 확인할때 사용된다.
			
		2. Class 변수명 = 타입.class; : 타입의 클래스의 정보를 가져오는 함수
		
		3. Class.forName("클래스이름") : 지정한 클래스의 정보를 가져오는 함수
			- 주로 외부 라이브러리(MYSQL Driver) 클래스를 가져올때 사용된다.
			- 일반예외가 발생하므로 예외처리가 필수이다.
			- 동적 로딩을 사용한다.
			
		4. 클래스의 정보를 반환하는 함수들
			1. .getFields(); : 클래스가 갖는 모든 멤버변수의 정보를 반환하는 함수
			2. .getConstructors() : 클래스가 갖는 모든 생성자의 정보를 반환하는 함수
			3. .get Methods() : 클래스가 갖는 모든 메소드의 정보를 반환하는 함수
				- import java.lang.reflect.Field; 필요
				
	[리플렉션] : 클래스, 인터페이스의 타입 정보를 찾아서 확인하는 방법
	
	[동적 로딩] : class파일을 읽어들여 class의 인스턴스를 생성하는 방법
			

[Wrapper 클래스]
	- 기본 타입(8가지) 자료들을 참조타입으로 변환
	
	- 기본 타입은 기능/메소드가 없다. 기본타입 자료가 메소드를 사용하기 위해서 사용한다.
	
	- 종류 			--> 오토박싱 / <-- 언박싱
		1. boolean 	<--> Boolean
		2. byte 	<--> Byte
		3. char 	<--> Character
		4. short 	<--> Short
		5. int 		<--> Integer
		6. long 	<--> Long
		7. float 	<--> Float
		8. double 	<--> Double
		
	- 오토박싱/언박싱
		- 오토박싱 : 기본타입을 참조타입으로 변환
			Integer = int;
		- 언박싱 : 참조타입을 기본타입으로 변환
			int = Integer;
			
	- 타입변환
		※ HTTP 웹통신을 할때 주로 문자열로 통신하므로 타입에 대한 변환이 중요하다.
		- 문자열 타입 --> 기본타입으로 변환
			- Integer.parseInt("100");
			- Double.parseDouble("3.14");
			- Float.parseFloat("3.14");
			- Byte.parseByte("100");
			- Short.parseShort("100");
			- Long.parseLong("100");
			- Boolean.parseBoolean("true");
				- 자료/값		:  "3.14" VS  3.14
				- 타입/값분류	: 문자열타입 VS 실수타입 
			
		- 기본타입 --> 문자열타입으로 변환
			- 자료(리터럴) + "";
			- String.valueOf(리터럴 자료);
			
[String 클래스]
	- 자바에서 문자열을 다루는 타입/클래스
	- 방법
		[1] : char[] 배열명 = new char[] { '유', '재', '석'};
		[2] : String 변수명 = "유재석";
		[3] : String 변수명 = new String("유재석");
			
	- 주요 메소드
		1. 문자열을 연결하는 방법
			- "문자열1".concat("문자열2"); 			: 두 문자열을 연결해서 반환하는 함수
			- StringBuilder 클래스 				: 메모리에 효율적이다.
				- .append("문자열"); 				: 하나의 문자열에 계속 연결해주는 함수
			- String.format("형식문자", 값); 		: 형식문자에 값이 대입된 문자열
			- String 변수명 = ""; 변수명 += "문자열"	: 문자열 변수에 += 연산자를 이용한 새로운 문자열 생성
			
		2. .charAt(인덱스) : 문자열내 인덱스 번쨰의 문자 1개를 반환하는 함수
		
		3. .length() : 문자열내 문자수를 반환하는 함수
		
		4. .replace(기존 문자열, 새로운 문자열)
			- 기존 문자열이 존재하면 새로운 문자열로 치환/변경해서 새로운 문자열로 반환하는 함수
			※ 문자열은 불변셩의 특징을 갖는다. 수정이 불가능(리터럴값이기 때문)
			
		5. .substring(시작인덱스, 끝인덱스) : 시작인덱스 부터 끝인덱스 전까지 문자열을 추출하는 함수
		
		6. .split("구분문자") : 구분문자 기준으로 분해한 여러 문자열을 배열로 반환하는 함수
		
		7. .indexOf("찾을문자열") : 문자열내 찾을 문자열이 존재하면 찾은 문자열의 인덱스를 반환하는 함수
			- 찾는 문자열이 없으면 -1 값을 리턴
			
		8. .contains("찾을문자열") : 문자열내 찾을 문자열이 존재하면 true 없으면 false를 반환하는 함수
		
		9. .getBytes() : 문자열들을 문자 바이트의 배열로 반환 함수
		
		[난수 문제 생성]
			※ import java.util.Random 필요
			1. new Random().nextInt(); 					: int타입의 난수를 생성
			2. new Random().nextInt(개수); 				: 0 ~ 개수 사이의 난수를 생성
			3. new Random().nextInt(개수) + 시작수;		: 시작수 ~ (시작수 + 개수) 사이의 난수를 생성
				- new Random().nextInt(100;				: 0 ~ 100 사이의 난수를 생성
				- new Random().nextInt(10) + 10;		: 10 ~ 20 사이의 난수를 생성
			4. (char)(new Random().nextInt(26) + 97);	: 랜덤 소문자 1개 생성
		
			
			
			