[상속]
	1. 부모로부터 자식이나 손자까지 물려주는 행위
	2. 부모클래스/상위클래스, 자식클래스/하위클래스
	3. extends 키워드 사용, '연장, 확장'
		class 하위클래스 extends 상위클래스 { }
		
	4. 상위클래스가 하위클래스의 개념을 확장, 세분화 하는 의미
		예) 		일반적인 개념			 구체적인(세부적인) 개념
			포유류(고래, 원숭이 등등) <-- 		사람
			
	5. 목적 : 특정 클래스의 멤버변수, 메소드를 물려받아 다른 클래스를 빠르게 설계하기 위해서이다.
	6. 장점 : 유지보수, 계층구조파악, 재사용성, *다형성*
	7. 하위클래스가 상위클래스의 멤버변수, 메소드를 사용할 수 있다.
		---> 단, 현실세계와 다르게 하위클래스가 상위클래스를 선택한다(자식이 부모를 선택한다)
	
	8. 타입변환 : 분류를 변환하는 행위
		- 타입 : 자료 속성의 분류
		- 자동(묵시적)타입변환
			[기본 타입]
				- 작은 타입 --> 큰 타입으로 기본타입이 변환
				- 큰 타입이 메모리적으로 더 크니까, 데이터의 표현 볌위가 더 크다.
				- byte -> short -> int -> long -> float -> double
			[참조 타입]
				- 하위 클래스에서 상위 클래스로 변환
				- 자바의 모든 클래스는 Object 클래스로 타입 변환이 가능하다.
				- 상하 관계에서만 가능하다.
				
		- 강제(명시적)타입변환, 캐스팅 : (자료형)을 앞에 붙임
			[기본 타입]
				- 큰 타입 --> 작은 타입으로 기본타입이 변환
				- 작은 타입이 메모리적으로 더 작으니까 손실, 데이터의 표현 범위가 더 작다.
				- double -> float -> long -> int -> short -> byte
			[참조 타입]
				- 상위 클래스에서 하위 클래스로 변환이 불가능하다.
				- 단, 하위 클래스의 인스턴스가 상위 클래스 타입으로 생성되면 가능하다.
	
	[물리적인 설계]
	9. **** 하위 클래스가 객체(인스턴스)를 생성하면 상위클래스의 객체(인스턴스)도 같이 메모리를 할당 ****
		즉, 하위클래스는 부모클래스 없이 인스턴스를 생성할 수 없다.
	
	[논리적인 설계]
	10. Object 클래스 : 자바회사에서 내부적으로 모든 클래스는 Object 클래스로부터 상속 받도록 설계되어 있다.
		즉, 내가 만든 클래스와 자바의 모든 클래스는 Object 클래스로부터 상속받는다.
		
		Object 클래스 <-- 포유류 클래스 <-- 사람 클래스