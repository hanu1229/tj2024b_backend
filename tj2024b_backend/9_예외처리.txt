[예외 처리]
	1. 실행 오류는 크게 2가지
		- 시스템 오류 : 시스템이 종료되는 수준의 심각한 문제
			- 프로그램 개발자가 예측하기 어렵고 방지가 힘든 메모리 관련 오류
		- 예외 : 개발자가 구현한 로직에서 발생한 실수나 사용자의 영향에 의해 발생하는 문제
			- 시스템 오류와 달리 예측하여 제어가 가능
			
	2. 예외 종류
		2-1. 일반예외 : 컴파일러가 예외 처리 코드 여부를 검사하는 예외 (경고가 뜸)
			- 입출력, 네트워크, 파일, JDBC(JAVA-DB연동) 등등
			- 주로 외부요소와 통신
		2-2. 실행예외 : 컴파일러가 예외 처리 코드 여부를 검사하지 않는 예외
			- NullPointer --> 인스턴스가 없다 / 캐스팅 / 인덱스 등등
			- 주로 개발자의 경험의 의존성이 크다.
			
	3. 예외 처리 목적
		- 비정상적인 프로그램 종료를 방지하고 안전하게 24시간 실행되는 프로그램을 만들고 유지보수를 위한 목적이 있다.
	
	4. 예외 처리 문법
		try {
				예외가 발생 하거나 할 것 같은 코드들
		} catch(처리할 예외클래스명 변수명) {
			예외가 발생했을때 실행할 코드들
		} catch( 예외클래스명 변수명) {
			예외가 발생했을때 실행할 코드들
		}
		
		※ 다중 catch 가능
		
	5. 예외 클래스
		- 예외가 발생했을때 발생 이유와 정보가 저장되는 타입
		- 문제점을 저장하고 로그처리하여 추후에 유지보수에 사용한다.
		- Exception 클래스 : 예외 처리 클래스 중 슈퍼 클래스(최상위 클래스)
			- 일반예외
				- ClassNotFoundException
				- IOException
				- 등등
			- 실행예외
				- NullPointerException
				- ArrayIndexOutOfBoundsException
				- InputMismatchException
				- NumberFormatException
				- 등등
				
	6. 예외 떠넘기기(던지기)
		- 여러곳에서 발생하는 예외를 특정한 곳에서 한번에 처리할 경우 주로 사용
		- 메소드에서 발생하는 예외를 메소드를 호출한 곳으로 예외를 보내는 방법
		- return과 비슷하다. return은 값을 반환하지만 throws는 예외를 반환한다고 생각하면 된다.
		- 예외 던지기 문법
			접근제한자 반환타입 함수명() throws 예외클래스 { }
	